name: CI & Release

on:
  push:
    branches: [ main ]
  create:
    tags: [ 'v*' ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 1) Install all workspaces in your repo (frontend, installer, etc)
      - name: Install all dependencies
        run: npm install   # not `npm ci`—we need workspaces & devDependencies (Tailwind)

      # 2) Frontend: lint/test/build
      - name: Test frontend
        run: npm --workspace=frontend test

      - name: Build frontend
        run: npm --workspace=frontend run build

      # 3) (Optional) Python support
      - name: Setup Python
        uses: actions/setup-python@v4
        with: python-version: '3.11'
      - name: Install Python deps
        if: ${{ runner.os != 'Windows' && (exists('requirements.txt')) }}
        run: pip install -r requirements.txt
      - name: Run Python tests
        if: ${{ runner.os != 'Windows' && (exists('tests')) }}
        run: pytest

  package-installer:
    needs: build-and-test
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 1) Re-install so Windows has your workspaces too
      - name: Install all dependencies
        run: npm install

      # 2) Build your Electron “main” (transpile, copy, etc)
      - name: Build installer code
        working-directory: installer
        run: npm run build

      # 3) Package the Windows .exe
      - name: Package Windows installer
        working-directory: installer
        run: npx electron-builder --win --x64

      # 4) Expose the .exe as a CI artifact
      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: QMMS-Setup
          path: installer/dist_installer/*.exe

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: package-installer
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create Draft GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: true

      - name: Upload installer to release
        uses: actions/upload-release-asset@v3
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: installer/dist_installer/QMMS-Setup-${{ github.ref_name }}.exe
          asset_name: QMMS-Setup-${{ github.ref_name }}.exe
          asset_content_type: application/octet-stream

